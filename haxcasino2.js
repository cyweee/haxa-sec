// save as exploit.js
import fetch from 'node-fetch';

const BASE_URL = "http://16.16.128.251:63417";
const TARGET_BALANCE = 1000000000;

// LCG constants (–∫–∞–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
const A = 1103515245n;
const C = 12345n;
const MOD = 2n ** 31n; // 2**31

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ seed (Number < 2**31)
function nextSeed(seed) {
  // seed –º–æ–∂–µ—Ç –±—ã—Ç—å Number –∏–ª–∏ BigInt
  const s = BigInt(seed);
  const next = (A * s + C) % MOD;
  return Number(next); // < 2**31, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∫–∞–∫ Number
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≥–∞–¥—ã–≤–∞–µ–º–æ–µ —á–∏—Å–ª–æ (—Å–µ—Ä–≤–µ—Ä –¥–µ–ª–∞–µ—Ç (seed % 10) + 1 –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è seed)
function guessFromSeedState(seedState) {
  // seedState —É–∂–µ —Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è randomNumber
  return (seedState % 10) + 1;
}

// –ò–∑–≤–ª–µ—á—å token (32 hex —Å–∏–º–≤–æ–ª–∞)
function extractToken(text) {
  const m = text.match(/([0-9a-f]{32})/i);
  return m ? m[1] : null;
}

// –ü–∞—Ä—Å–∏–º JSON, –µ—Å–ª–∏ –æ–Ω –≥–¥–µ-—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º null –µ—Å–ª–∏ –Ω–µ—Ç)
function tryParseDirtyJSON(raw_text) {
  const i = raw_text.indexOf('{');
  if (i === -1) return null;
  const json_string = raw_text.substring(i);
  try {
    return JSON.parse(json_string);
  } catch (e) {
    return null;
  }
}

async function makePlayRequest(token, bet, guess) {
  const res = await fetch(`${BASE_URL}/play`, {
    method: 'POST',
    headers: { 'Authorization': token, 'Content-Type': 'application/json' },
    body: JSON.stringify({ bet: bet, guess: guess })
  });
  const text = await res.text();
  const parsed = tryParseDirtyJSON(text);
  return { raw: text, json: parsed };
}

async function runExploit() {
  console.log("[+] Requesting token...");
  const genRes = await fetch(`${BASE_URL}/generate_token`);
  const genText = await genRes.text();
  const token = extractToken(genText);
  if (!token) {
    console.error("[X] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å token –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:");
    console.error(genText);
    return;
  }
  console.log(`[+] Received token: ${token}`);

  // –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π unix time –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (token —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
  const baseSeed = Math.floor(Date.now() / 1000);
  console.log(`[+] Local base seed (approx): ${baseSeed} (unix seconds). Trying offsets ¬±5s`);

  let syncedSeedState = null; // —ç—Ç–æ –±—É–¥–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ seed –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞ nextSeed (–∫–∞–∫ —Å–µ—Ä–≤–µ—Ä —Ö—Ä–∞–Ω–∏—Ç)
  let currentBalance = 1000;

  // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è ‚Äî —Å–º–µ—â–µ–Ω–∏—è -5..+5
  for (let offset = -5; offset <= 5; offset++) {
    const testSeed = baseSeed + offset;
    const firstState = nextSeed(testSeed); // —Å–µ—Ä–≤–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç nextSeed —Å—Ä–∞–∑—É –ø—Ä–∏ play
    const predictedGuess = guessFromSeedState(firstState);

    console.log(`[?] testing seed ${testSeed} -> predicted ${predictedGuess}`);

    let res;
    try {
      res = await makePlayRequest(token, 1, predictedGuess);
    } catch (e) {
      console.error("[X] –û—à–∏–±–∫–∞ –ø—Ä–∏ /play:", e);
      return;
    }

    // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª JSON –∏ win === true ‚Äî –º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
    if (res.json && res.json.win === true) {
      console.log(`[!!!] SYNCHRONIZED via JSON! seed: ${testSeed}. Server randomNumber: ${res.json.randomNumber}`);
      syncedSeedState = firstState;
      currentBalance += 1;
      break;
    }

    // –∏–ª–∏ –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π UI —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç "Congratulations" / —Å—Ö–æ–∂—É—é —Ñ—Ä–∞–∑—É
    if (res.raw && res.raw.includes("Congratulations")) {
      console.log(`[!!!] SYNCHRONIZED via text! seed: ${testSeed}`);
      syncedSeedState = firstState;
      currentBalance += 1;
      break;
    }

    // –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ–∏–≥—Ä—ã—à
    currentBalance -= 1;
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∫–∞–∑–∏–Ω–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    let serverNum = '?';
    if (res.json && typeof res.json.randomNumber !== 'undefined') {
      serverNum = res.json.randomNumber;
    } else {
      const line = (res.raw || "").split('\n').find(l => l.toLowerCase().includes('casino'));
      if (line) {
        const found = line.match(/(\d+)/);
        if (found) serverNum = found[1];
      }
    }
    console.log(`[-] Offset ${offset} failed ‚Äî server rolled ${serverNum}. Balance ${currentBalance}`);
  }

  if (syncedSeedState === null) {
    console.error("[X] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å seed –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ¬±5s. –ü–æ–ø—Ä–æ–±—É–π —É–≤–µ–ª–∏—á–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π token.");
    return;
  }

  console.log(`[+] Starting all-in loop from seed state ${syncedSeedState}. Current balance ${currentBalance}`);

  // all-in —Ü–∏–∫–ª: syncedSeedState ‚Äî —ç—Ç–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ seed, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ—Ä–≤–µ—Ä —É–∂–µ –æ–±–Ω–æ–≤–∏–ª –æ–¥–∏–Ω —Ä–∞–∑
  let currentSeedState = syncedSeedState;

  while (currentBalance < TARGET_BALANCE) {
    // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏ –∫–∞–∂–¥–æ–º /play —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç seed, –∑–∞—Ç–µ–º —Å—á–∏—Ç–∞–µ—Ç number.
    // –ù–æ —É –Ω–∞—Å currentSeedState —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º **–ø–æ—Å–ª–µ** –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ nextSeed,
    // –ø–æ—ç—Ç–æ–º—É –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–≤–∫—É, –º—ã –¥–æ–ª–∂–Ω—ã –≤—ã–∑–≤–∞—Ç—å nextSeed –µ—â—ë —Ä–∞–∑:
    currentSeedState = nextSeed(currentSeedState);
    const guess = guessFromSeedState(currentSeedState);
    const bet = currentBalance;

    console.log(`[+] Betting $${bet} on ${guess} (seed -> ${currentSeedState})`);

    let res;
    try {
      res = await makePlayRequest(token, bet, guess);
    } catch (e) {
      console.error("[X] –û—à–∏–±–∫–∞ –ø—Ä–∏ /play:", e);
      return;
    }

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª JSON
    if (res.json) {
      if (res.json.win === true) {
        currentBalance += bet;
        console.log(`[+] WIN! New balance: $${currentBalance}`);
        if (res.json.flag) {
          console.log("\n[üèÜ FLAG RECEIVED üèÜ]");
          console.log(res.json.flag);
          return;
        }
      } else {
        currentBalance -= bet;
        console.log(`[!] LOST. New balance: $${currentBalance}`);
        if (currentBalance <= 0) {
          console.log("[!] Balance depleted ‚Äî requesting new token and restarting.");
          // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π restart: –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π token –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
          return runExploit();
        }
      }
    } else if (res.raw && res.raw.includes("Congratulations")) {
      currentBalance += bet;
      console.log(`[+] WIN (text)! New balance: $${currentBalance}`);
    } else {
      console.error("[X] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:");
      console.error(res.raw);
      return;
    }

    // short delay, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
    await new Promise(r => setTimeout(r, 50));
  }
}

runExploit().catch(e => console.error("Fatal error:", e));
